🔹 Conceito de Branches

Branch (ramo) é uma linha paralela de desenvolvimento.

Permite trabalhar em novos recursos, correções ou experimentos sem afetar a branch principal (main).

Cada branch mantém seu histórico de commits independente até ser mesclada (merge) com outra branch.

💡 Analogias:

main → projeto “estável”

feature → novo recurso ou teste

Branch = caminho alternativo sem mexer no caminho principal

🔹 Fluxo de Branches no Git

 main
         |
         |  git checkout -b feature-x
         v
      feature-x
         |
         |  git add . / git commit -m "novas alterações"
         v
      feature-x (commits feitos)
         |
         |  git checkout main
         |  git pull origin main   # garante que main esteja atualizado
         |
         |  git merge feature-x
         v
      main (feature-x mesclada)
         |
         |  git branch -d feature-x  # deleta branch local
         v
      main

´´´
🔹 Comandos principais
1. Criar uma branch
git branch nome-da-branch


Apenas cria a branch, não muda para ela.

git checkout nome-da-branch


Muda para a branch criada.

Alternativa moderna:

git switch nome-da-branch


Criar e mudar de branch de uma vez:

git checkout -b nome-da-branch
# ou
git switch -c nome-da-branch

2. Mesclar branch (Merge)

Mude para a branch que vai receber as alterações (geralmente main):

git checkout main


Faça o merge da branch desejada:

git merge nome-da-branch


Git tentará mesclar automaticamente.

Se não houver conflitos, a branch é mesclada com sucesso.

3. Resolver conflitos

Conflito ocorre quando a mesma linha de um arquivo foi alterada em duas branches diferentes.

Git marca o conflito assim:

<<<<<<< HEAD
Conteúdo da branch atual
=======
Conteúdo da branch que você está mesclando
>>>>>>> nome-da-branch


Para resolver:

Edite o arquivo, escolha ou combine versões.

Salve as alterações.

Marque como resolvido:

git add arquivo-com-conflito
git commit -m "Resolve conflito"

4. Deletar branch

Depois de mesclar e não precisar mais da branch:

git branch -d nome-da-branch


Forçar exclusão se não foi mesclada:

git branch -D nome-da-branch

🔹 Dicas práticas

Sempre crie branches para novas features ou testes, nunca trabalhe direto no main.

Faça pull da branch principal antes de merge, assim você minimiza conflitos:

git checkout main
git pull origin main
git checkout nome-da-branch
git merge main


Nomeie suas branches de forma clara, por exemplo:

feature/login

bugfix/correcoes-css

hotfix/erro-404

Use pull request (PR) no GitHub para mesclar branches em projetos colaborativos, permitindo revisão de código.
´´´