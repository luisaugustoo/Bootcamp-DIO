O Git organiza seu trabalho em três áreas principais:

Diretório de trabalho (Working Directory) → Onde você edita os arquivos.

Staging area (Index) → Onde você “prepara” os arquivos para commit.

Repositório local (Local Repository) → Onde ficam os commits gravados.

O git reset é uma ferramenta para reposicionar o HEAD, ou seja, o ponteiro que mostra qual commit você está atualmente. Dependendo da opção (--soft, --mixed, --hard), ele muda o que você quer desfazer:

Só o commit (--soft) → Mantém tudo pronto para refazer o commit.

Commit + staging (--mixed) → Mantém as alterações no diretório, mas tira do staging.

Tudo (--hard) → Apaga alterações, staging e commit.

💡 Por que isso é útil?

Errou ao commitar algo que não devia? Use git reset para voltar atrás.

Quer reorganizar commits antes de enviar para o GitHub? --soft é ótimo.

Quer limpar completamente alterações temporárias ou testes que deram errado? --hard resolve.

🔹 Analogias para entender melhor

Commit = Fotografia do seu código

Cada commit é como tirar uma foto do estado atual do projeto.

Staging = Cesto de fotos para revelar

Antes de tirar a foto final (commit), você escolhe quais alterações vão entrar na foto.

git reset = Máquina do tempo parcial

--soft: volta no tempo, mas mantém as fotos no cesto.

--mixed: volta no tempo e tira as fotos do cesto, mas ainda existem na sua mesa (Working Directory).

--hard: volta no tempo e joga fora tudo que estava na mesa e no cesto.

🔹 Situações práticas

Comitei acidentalmente arquivos que não queria → git reset --mixed HEAD~1

Comitei com mensagem errada, mas quero manter as alterações → git reset --soft HEAD~1

Fiz testes bagunçados e quero começar do zero → git reset --hard HEAD~1